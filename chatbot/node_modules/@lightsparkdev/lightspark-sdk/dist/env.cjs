"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/env.ts
var env_exports = {};
__export(env_exports, {
  RequiredCredentials: () => RequiredCredentials,
  getCredentialsFromEnvOrThrow: () => getCredentialsFromEnvOrThrow
});
module.exports = __toCommonJS(env_exports);
var import_dotenv = __toESM(require("dotenv"), 1);

// src/helpers.ts
var BITCOIN_NETWORKS = [
  "MAINNET" /* MAINNET */,
  "TESTNET" /* TESTNET */,
  "SIGNET" /* SIGNET */,
  "REGTEST" /* REGTEST */
];
var isBitcoinNetwork = (bitcoinNetwork) => {
  return BITCOIN_NETWORKS.includes(bitcoinNetwork);
};
var assertValidBitcoinNetwork = (bitcoinNetwork) => {
  if (!isBitcoinNetwork(bitcoinNetwork)) {
    throw new Error(
      `Invalid bitcoin network ${bitcoinNetwork}. Valid networks: ${BITCOIN_NETWORKS.join(
        ", "
      )}`
    );
  }
};
var getBitcoinNetworkOrThrow = (bitcoinNetwork) => {
  assertValidBitcoinNetwork(bitcoinNetwork.toUpperCase());
  return bitcoinNetwork;
};

// src/env.ts
var RequiredCredentials = /* @__PURE__ */ ((RequiredCredentials2) => {
  RequiredCredentials2["ClientId"] = "LIGHTSPARK_API_TOKEN_CLIENT_ID";
  RequiredCredentials2["ClientSecret"] = "LIGHTSPARK_API_TOKEN_CLIENT_SECRET";
  RequiredCredentials2["BitcoinNetwork"] = "BITCOIN_NETWORK";
  return RequiredCredentials2;
})(RequiredCredentials || {});
var getCredentialsFromEnvOrThrow = () => {
  const env = import_dotenv.default.config({
    path: process.env.HOME + "/.lightsparkapienv"
  }).parsed || {};
  const missingTestCredentials = Object.values(RequiredCredentials).filter(
    (cred) => !env[cred]
  );
  if (missingTestCredentials.length) {
    throw new Error(
      `Missing test credentials. Please set ${missingTestCredentials.join(
        ", "
      )} environment variables.`
    );
  }
  const apiTokenClientId = env["LIGHTSPARK_API_TOKEN_CLIENT_ID" /* ClientId */];
  const apiTokenClientSecret = env["LIGHTSPARK_API_TOKEN_CLIENT_SECRET" /* ClientSecret */];
  const bitcoinNetwork = getBitcoinNetworkOrThrow(
    env["BITCOIN_NETWORK" /* BitcoinNetwork */]
  );
  const testNodePassword = "1234!@#$";
  const baseUrl = env["LIGHTSPARK_BASE_URL"] || "api.lightspark.com";
  return {
    apiTokenClientId,
    apiTokenClientSecret,
    bitcoinNetwork,
    testNodePassword,
    baseUrl
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RequiredCredentials,
  getCredentialsFromEnvOrThrow
});
