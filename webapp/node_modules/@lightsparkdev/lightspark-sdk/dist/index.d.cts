import { AuthProvider } from '@lightsparkdev/core';
import { W as WebhookEventType, L as LightsparkClient } from './index-145ff316.js';
export { A as Account, a as AccountToApiTokensConnection, b as AccountToChannelsConnection, c as AccountToNodesConnection, d as AccountToPaymentRequestsConnection, e as AccountToTransactionsConnection, f as AccountToWalletsConnection, g as AccountToWithdrawalRequestsConnection, h as ApiToken, j as AuditLogActor, B as Balances, l as BlockchainBalance, C as CancelInvoiceInput, m as CancelInvoiceOutput, n as Channel, o as ChannelClosingTransaction, q as ChannelFees, r as ChannelOpeningTransaction, t as ChannelSnapshot, v as ChannelStatus, w as ChannelToTransactionsConnection, x as ClaimUmaInvitationInput, y as ClaimUmaInvitationOutput, z as ClaimUmaInvitationWithIncentivesInput, D as ClaimUmaInvitationWithIncentivesOutput, E as ComplianceProvider, F as Connection, G as CreateApiTokenInput, H as CreateApiTokenOutput, I as CreateInvitationWithIncentivesInput, J as CreateInvitationWithIncentivesOutput, K as CreateInvoiceInput, M as CreateInvoiceOutput, N as CreateLnurlInvoiceInput, O as CreateNodeWalletAddressInput, P as CreateNodeWalletAddressOutput, Q as CreateTestModeInvoiceInput, R as CreateTestModeInvoiceOutput, S as CreateTestModePaymentInput, T as CreateTestModePaymentoutput, U as CreateUmaInvitationInput, V as CreateUmaInvitationOutput, X as CreateUmaInvoiceInput, Y as CurrencyAmount, Z as CurrencyUnit, _ as DailyLiquidityForecast, $ as DeclineToSignMessagesInput, a0 as DeclineToSignMessagesOutput, a1 as DeleteApiTokenInput, a2 as DeleteApiTokenOutput, a3 as Deposit, a5 as Entity, a6 as FailHtlcsInput, a7 as FailHtlcsOutput, a8 as FeeEstimate, a9 as FundNodeInput, aa as FundNodeOutput, ab as GraphNode, ac as Hop, ae as HtlcAttemptFailureCode, af as IdAndSignature, ag as IncentivesIneligibilityReason, ah as IncentivesStatus, ai as IncomingPayment, aj as IncomingPaymentAttempt, al as IncomingPaymentAttemptStatus, am as IncomingPaymentToAttemptsConnection, an as IncomingPaymentsForInvoiceQueryInput, ao as IncomingPaymentsForInvoiceQueryOutput, ap as Invoice, ar as InvoiceData, as as InvoiceForPaymentHashInput, at as InvoiceForPaymentHashOutput, au as InvoiceType, av as LightningFeeEstimateForInvoiceInput, aw as LightningFeeEstimateForNodeInput, ax as LightningFeeEstimateOutput, ay as LightningPaymentDirection, az as LightningTransaction, aB as LightsparkNode, aD as LightsparkNodeOwner, aF as LightsparkNodeStatus, aG as LightsparkNodeToChannelsConnection, aH as LightsparkNodeToDailyLiquidityForecastsConnection, aI as LightsparkNodeWithOSK, aJ as LightsparkNodeWithRemoteSigning, aK as MultiSigAddressValidationParameters, aL as Node, aN as NodeAddress, aO as NodeAddressType, aP as NodeToAddressesConnection, aQ as OnChainFeeTarget, aR as OnChainTransaction, aT as OutgoingPayment, aU as OutgoingPaymentAttempt, aV as OutgoingPaymentAttemptStatus, aW as OutgoingPaymentAttemptToHopsConnection, aX as OutgoingPaymentForIdempotencyKeyInput, aY as OutgoingPaymentForIdempotencyKeyOutput, aZ as OutgoingPaymentToAttemptsConnection, a_ as OutgoingPaymentsForInvoiceQueryInput, a$ as OutgoingPaymentsForInvoiceQueryOutput, b0 as OutgoingPaymentsForPaymentHashQueryInput, b1 as OutgoingPaymentsForPaymentHashQueryOutput, b2 as PageInfo, b3 as PayInvoiceInput, b4 as PayInvoiceOutput, b5 as PayUmaInvoiceInput, b6 as PaymentDirection, b7 as PaymentFailureReason, b8 as PaymentRequest, ba as PaymentRequestData, bb as PaymentRequestStatus, bc as Permission, bd as PostTransactionData, be as RegionCode, bf as RegisterPaymentInput, bg as RegisterPaymentOutput, bh as ReleaseChannelPerCommitmentSecretInput, bi as ReleaseChannelPerCommitmentSecretOutput, bj as ReleasePaymentPreimageInput, bk as ReleasePaymentPreimageOutput, bl as RemoteSigningSubEventType, bm as RequestWithdrawalInput, bn as RequestWithdrawalOutput, bo as RichText, bp as RiskRating, bq as RoutingTransaction, bs as RoutingTransactionFailureReason, bt as ScreenNodeInput, bu as ScreenNodeOutput, bv as Secret, bw as SendPaymentInput, bx as SendPaymentOutput, by as SetInvoicePaymentHashInput, bz as SetInvoicePaymentHashOutput, bA as SignInvoiceInput, bB as SignInvoiceOutput, bC as SignMessagesInput, bD as SignMessagesOutput, bE as Signable, bG as SignablePayload, bI as SignablePayloadStatus, bJ as SingleNodeDashboard, bK as Transaction, bM as TransactionFailures, bN as TransactionStatus, bO as TransactionType, bP as TransactionUpdate, bQ as UmaInvitation, bS as UpdateChannelPerCommitmentPointInput, bT as UpdateChannelPerCommitmentPointOutput, bU as UpdateNodeSharedSecretInput, bV as UpdateNodeSharedSecretOutput, bW as Wallet, bX as WalletStatus, bY as WalletToPaymentRequestsConnection, bZ as WalletToTransactionsConnection, b_ as WalletToWithdrawalRequestsConnection, b$ as Withdrawal, c1 as WithdrawalFeeEstimateInput, c2 as WithdrawalFeeEstimateOutput, c3 as WithdrawalMode, c4 as WithdrawalRequest, c5 as WithdrawalRequestStatus, c6 as WithdrawalRequestToChannelClosingTransactionsConnection, c7 as WithdrawalRequestToChannelOpeningTransactionsConnection, c8 as WithdrawalRequestToWithdrawalsConnection, i as getApiTokenQuery, k as getAuditLogActorQuery, p as getChannelClosingTransactionQuery, s as getChannelOpeningTransactionQuery, u as getChannelSnapshotQuery, a4 as getDepositQuery, ad as getHopQuery, ak as getIncomingPaymentAttemptQuery, aq as getInvoiceQuery, aA as getLightningTransactionQuery, aE as getLightsparkNodeOwnerQuery, aC as getLightsparkNodeQuery, aM as getNodeQuery, aS as getOnChainTransactionQuery, b9 as getPaymentRequestQuery, br as getRoutingTransactionQuery, bH as getSignablePayloadQuery, bF as getSignableQuery, bL as getTransactionQuery, bR as getUmaInvitationQuery, c0 as getWithdrawalQuery } from './index-145ff316.js';
import { B as BitcoinNetwork } from './BitcoinNetwork-4f6ea015.js';
import 'zen-observable';

declare class AccountTokenAuthProvider implements AuthProvider {
    private readonly apiTokenClientId;
    private readonly apiTokenClientSecret;
    private readonly utf8AuthBytes;
    constructor(apiTokenClientId: string, apiTokenClientSecret: string);
    addWsConnectionParams(params: Record<string, string>): Promise<Record<string, string>>;
    addAuthHeaders(headers: Record<string, string>): Promise<Record<string, string>>;
    isAuthorized(): Promise<boolean>;
}

declare const isBitcoinNetwork: (bitcoinNetwork: BitcoinNetwork) => boolean;
declare const assertValidBitcoinNetwork: (bitcoinNetwork: BitcoinNetwork) => void;
declare const getBitcoinNetworkOrThrow: (bitcoinNetwork: BitcoinNetwork) => BitcoinNetwork;

declare const WEBHOOKS_SIGNATURE_HEADER = "lightspark-signature";
interface WebhookEvent {
    event_type: WebhookEventType;
    event_id: string;
    timestamp: Date;
    entity_id: string;
    wallet_id?: string;
}
declare const verifyAndParseWebhook: (data: Uint8Array, hexdigest: string, webhook_secret: string) => Promise<WebhookEvent>;
type Validator = {
    should_sign: (event: WebhookEvent) => boolean;
};
declare class RemoteSigningWebhookHandler {
    #private;
    client: LightsparkClient;
    validator: Validator;
    constructor(client: LightsparkClient, masterSeed: Uint8Array, validator: Validator);
    handleWebhookRequest(data: Uint8Array, webhookSignature: string, webhookSecret: string): Promise<unknown>;
}

export { AccountTokenAuthProvider, BitcoinNetwork, LightsparkClient, RemoteSigningWebhookHandler, WEBHOOKS_SIGNATURE_HEADER, WebhookEvent, WebhookEventType, assertValidBitcoinNetwork, getBitcoinNetworkOrThrow, isBitcoinNetwork, verifyAndParseWebhook };
