"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/env.ts
var env_exports = {};
__export(env_exports, {
  RequiredCredentials: () => RequiredCredentials,
  RequiredWalletCredentials: () => RequiredWalletCredentials,
  getCredentialsFromEnvOrThrow: () => getCredentialsFromEnvOrThrow
});
module.exports = __toCommonJS(env_exports);
var import_dotenv = __toESM(require("dotenv"), 1);
var RequiredCredentials = /* @__PURE__ */ ((RequiredCredentials2) => {
  RequiredCredentials2["AccountId"] = "LIGHTSPARK_ACCOUNT_ID";
  RequiredCredentials2["JwtPrivateKey"] = "LIGHTSPARK_JWT_PRIV_KEY";
  return RequiredCredentials2;
})(RequiredCredentials || {});
var RequiredWalletCredentials = /* @__PURE__ */ ((RequiredWalletCredentials2) => {
  RequiredWalletCredentials2["Jwt"] = "LIGHTSPARK_JWT";
  RequiredWalletCredentials2["WalletPublicKey"] = "LIGHTSPARK_WALLET_PUB_KEY";
  RequiredWalletCredentials2["WalletPrivateKey"] = "LIGHTSPARK_WALLET_PRIV_KEY";
  return RequiredWalletCredentials2;
})(RequiredWalletCredentials || {});
var getCredentialsFromEnvOrThrow = (walletEnvSuffix = ``, requireJwt = true) => {
  const env = import_dotenv.default.config({
    path: process.env.HOME + "/.lightsparkenv"
  }).parsed || {};
  const missingCredentials = Object.values(RequiredCredentials).filter(
    (cred) => !env[cred]
  );
  if (missingCredentials.length) {
    throw new Error(
      `Missing credentials. Please set ${missingCredentials.join(
        ", "
      )} environment variables or run \`lightspark-wallet init-env\`.`
    );
  }
  const accountId = env["LIGHTSPARK_ACCOUNT_ID" /* AccountId */];
  const jwtSigningPrivateKey = env["LIGHTSPARK_JWT_PRIV_KEY" /* JwtPrivateKey */];
  if (requireJwt) {
    const missingWalletCredentials = Object.values(
      RequiredWalletCredentials
    ).filter((cred) => !env[getWalletEnvVariable(cred, walletEnvSuffix)]);
    if (missingWalletCredentials.length) {
      throw new Error(
        `Missing wallet credentials. Please set ${missingWalletCredentials.map((cred) => getWalletEnvVariable(cred, walletEnvSuffix)).join(
          ", "
        )} environment variables or run \`lightspark-wallet create-and-init-wallet\` to setup a new wallet.`
      );
    }
  }
  const jwt = env[getWalletEnvVariable("LIGHTSPARK_JWT" /* Jwt */, walletEnvSuffix)];
  const pubKey = env[getWalletEnvVariable(
    "LIGHTSPARK_WALLET_PUB_KEY" /* WalletPublicKey */,
    walletEnvSuffix
  )];
  const privKey = env[getWalletEnvVariable(
    "LIGHTSPARK_WALLET_PRIV_KEY" /* WalletPrivateKey */,
    walletEnvSuffix
  )];
  const baseUrl = env[`LIGHTSPARK_WALLET_BASE_URL`] || `api.lightspark.com`;
  return {
    accountId,
    jwt: jwt || "",
    pubKey,
    privKey,
    baseUrl,
    jwtSigningPrivateKey
  };
};
var getWalletEnvVariable = (walletEnvKey, walletEnvSuffix) => {
  return `${walletEnvKey}${walletEnvSuffix}`;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RequiredCredentials,
  RequiredWalletCredentials,
  getCredentialsFromEnvOrThrow
});
