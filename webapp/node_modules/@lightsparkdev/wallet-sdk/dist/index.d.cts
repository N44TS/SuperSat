import { A as AccessTokenStorage, a as AccessTokenInfo } from './index-3bceb962.js';
export { b as AmazonS3FundsRecoveryKit, B as Balances, c as BitcoinNetwork, C as CancelInvoiceInput, d as CancelInvoiceOutput, e as ChannelClosingTransaction, f as ChannelOpeningTransaction, i as Connection, j as CreateBitcoinFundingAddressOutput, k as CreateInvoiceInput, l as CreateInvoiceOutput, m as CreateTestModeInvoiceInputWallet, n as CreateTestModeInvoiceOutput, o as CreateTestModePaymentInputWallet, p as CreateTestModePaymentoutput, q as CurrencyAmount, r as CurrencyUnit, D as DeleteFundsRecoveryKitOutput, s as DeployWalletOutput, t as Deposit, E as Entity, F as FeeEstimate, v as FundWalletInput, w as FundWalletOutput, x as FundsRecoveryKit, G as GraphNode, I as IncomingPayment, z as InitializeWalletInput, H as InitializeWalletOutput, J as Invoice, M as InvoiceData, N as InvoiceType, O as KeyInput, P as KeyType, Q as LightningFeeEstimateForInvoiceInput, R as LightningFeeEstimateForNodeInput, S as LightningFeeEstimateOutput, T as LightningTransaction, L as LightsparkClient, V as LoginWithJWTInput, W as LoginWithJWTOutput, X as Node, Z as NodeAddress, _ as NodeAddressType, $ as NodeToAddressesConnection, a0 as OnChainTransaction, a2 as OutgoingPayment, a4 as PageInfo, a5 as PayInvoiceInput, a6 as PayInvoiceOutput, a7 as PaymentFailureReason, a8 as PaymentRequest, aa as PaymentRequestData, ab as PaymentRequestStatus, ac as RequestWithdrawalInput, ad as RequestWithdrawalOutput, ae as RichText, af as SendPaymentInput, ag as SendPaymentOutput, ah as TerminateWalletOutput, ai as Transaction, ak as TransactionStatus, al as TransactionType, am as UpdateFundsRecoveryKitInput, an as UpdateFundsRecoveryKitOutput, ao as Wallet, ap as WalletDashboard, aq as WalletStatus, ar as WalletToPaymentRequestsConnection, as as WalletToTransactionsConnection, at as WalletToWithdrawalRequestsConnection, au as Withdrawal, aw as WithdrawalFeeEstimateInput, ax as WithdrawalFeeEstimateOutput, ay as WithdrawalMode, az as WithdrawalRequest, aA as WithdrawalRequestStatus, aB as WithdrawalRequestToWithdrawalsConnection, g as getChannelClosingTransactionQuery, h as getChannelOpeningTransactionQuery, u as getDepositQuery, y as getIncomingPaymentQuery, K as getInvoiceQuery, U as getLightningTransactionQuery, Y as getNodeQuery, a1 as getOnChainTransactionQuery, a3 as getOutgoingPaymentQuery, a9 as getPaymentRequestQuery, aj as getTransactionQuery, av as getWithdrawalQuery } from './index-3bceb962.js';
import { AuthProvider } from '@lightsparkdev/core';
import 'zen-observable-ts';

/**
 * Stores JWT access token info in local storage for use in Chrome Extensions
 * (chrome.storage.local).
 *
 * For web: This should not be used in web. Instead, you should use InMemoryTokenStorage
 * and silently re-auth the user when the page is refreshed.
 * For React Native: This should not be used in React Native. Instead, you should use
 * EncryptedLocalTokenStorage from the @lightsparkdev/react-native package.
 */
declare class ChromeExtensionLocalTokenStorage implements AccessTokenStorage {
    getCurrent(): Promise<AccessTokenInfo | null>;
    replace(tokenInfo: AccessTokenInfo): Promise<void>;
    clear(): Promise<void>;
}

/**
 * A custom [AuthProvider] that uses a JWT token to authenticate requests.
 *
 * Should generally not be used directly by clients,
 * but rather through the [loginWithJwt] method of a [LightsparkWalletClient].
 *
 * @param tokenStorage An [AccessTokenStorage] implementation that stores or retrieves the
 *     current JWT token info.
 */
declare class CustomJwtAuthProvider implements AuthProvider {
    private tokenStorage;
    constructor(tokenStorage: AccessTokenStorage);
    setTokenInfo(tokenInfo: AccessTokenInfo): Promise<void>;
    logout(): Promise<void>;
    addAuthHeaders(headers: Record<string, unknown>): Promise<any>;
    isAuthorized(): Promise<boolean>;
    addWsConnectionParams(params: Record<string, unknown>): Promise<Record<string, unknown>>;
}

/**
 * In-memory implementation of {@link AccessTokenStorage}.
 */
declare class InMemoryTokenStorage implements AccessTokenStorage {
    private tokenInfo;
    getCurrent(): Promise<AccessTokenInfo | null>;
    replace(tokenInfo: AccessTokenInfo): Promise<void>;
    clear(): Promise<void>;
}

export { AccessTokenInfo, AccessTokenStorage, ChromeExtensionLocalTokenStorage, CustomJwtAuthProvider, InMemoryTokenStorage };
